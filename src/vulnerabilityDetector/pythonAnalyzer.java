package vulnerabilityDetector;

import java.util.ArrayList;

import codeInterpration.CodeInterpreter;

public class pythonAnalyzer extends Analyzer {

	public pythonAnalyzer(CodeInterpreter code) {
		super(code);
		checkInputValidation();
	}

	/* This method should work by looking at inputs of python code specifically if the java code is in SQL (Django for Python)
	 * Use regex expressions in order to find blocks of information and data for input values and find out if these
	 * instances make the system vulnerable or not
	 * 
	 * .execute[(]( |)('|\")SELECT.+FROM.+('|\").*..*( |)[)]( |\n)
	 */
	public void checkInputValidation(CodeInterpreter inter) {
		
		ArrayList<String> queries = inter.searchCode(".execute[(]( |)('|\")SELECT.+FROM.+('|\").*..*( |)[)]( |\n)");
		for (String searches : queries) {
			if (inter.searchCode(searches, "('|\")( |)%(| )([a-zA-Z0-9]+)[)]").size() > 0) {
				inter.addAttack(new attackVector(searches, Type.INPUTVALIDATION));
			}
		}  
		super.checkInputValidation();
		
	}
	
	public boolean hasSanitizeMethod() {
		return false;
	}

}
